Description: >
    Sagar Sathyanarayanan / Intership assignment - Network Infrastructure
    This is a template to deploy the network infrastructure of the intership. The network infrastructure comprises a VPC,
    with a pair of public and private subnets spread across two Avalibilty Zones. It also has a Internet Gateway deployed.
    This contains one public routing table associated with 2 subnets. There are two NAT Gateways placed in the public subnet. 
    There are two private route tables as well. 


Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String

  VpcCird:
    Description: IP range for the VPC
    Type: String
  
  PublicCidrBlock1:
    Description: IP range for Public subnet 1 in AZ 1
    Type: String

  PublicCidrBlock2:
    Description: IP range for Public subnet 1 in AZ 1
    Type: String

  PrivateCidrBlock1:
    Description: IP range for Private subnet 1 in AZ 1
    Type: String

  PrivateCidrBlock2:
    Description: IP range for Private subnet 2 in AZ 2
    Type: String


Resources: 

# Creating an VPC named Main.
  Main:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCird
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The Internet gateway is the medium where the cloud interacts with the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Main

# Main VPC public subnet 1 in AZ 2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Main
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref PublicCidrBlock1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet1 (AZ1)

# Main VPC public subnet 2 in AZ 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Main
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref PublicCidrBlock2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet2 (AZ2)

# Main VPC private subnet 1 in AZ 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Main
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref PrivateCidrBlock1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet1 (AZ1)

# Main VPC private subnet 2 in AZ 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Main
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref PrivateCidrBlock2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet2 (AZ2)

# The NAT gateway provides outbound internet access to private subnet. It also transalates public traffic to private. It resides inside 
# the publi subnet. Since only one of the private subnet requires internet access, I have created only one NAT gateway  
  NAT:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId:
         Ref: PublicSubnet1

  EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
# This route table will have a default rule o allow all outbound traffic routed to the internet gateway.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: Main
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public RouteTable

#In order to associate subnets with our route table, we will need to use a SubnetRouteTableAssociation.
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private RouteTable

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    
    Properties:
       RouteTableId:
         Ref: PrivateRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId:
         Ref: NAT


Outputs:

  Main:
    Description: A reference to created VPC named Main
    Value: !Ref Main
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1
  
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2

  PublicRouteTable:
    Description: PublicRouteTable
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PublicRouteTable

  PrivateRouteTable:
    Description: PrivateRouteTable
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PrivateRouteTable
  